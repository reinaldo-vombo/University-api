// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                 String               @id @default(cuid())
  name               String
  email              String               @unique
  password           String
  avatar             String?
  academicDepartment AcademicDepartment?  @relation("DepartmentHead")
  staffDepartments   AcademicDepartment[] @relation("DepartmentStaff")
  role               UserRole             @default(super_admin)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@map("users")
}

model AcademicSemester {
  id                         String                      @id @default(uuid())
  title                      String
  year                       String
  code                       String
  startMonth                 String
  endMonth                   String
  isCurrent                  Boolean                     @default(false)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  courseDisciplines          CourseDiscipline[]
  semesterRegistrations      SemesterRegistration[]
  students                   Student[]
  studentEnrolledCourses     StudentEnrolledCourse[]     @relation(name: "EnrolledCourseSemester")
  studentEnrolledCourseMarks StudentEnrolledCourseMark[] @relation(name: "MarkSemester")
  studentSemesterPayments    StudentSemesterPayment[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicDepartments AcademicDepartment[]
  faculties           Faculty[]
  students            Student[]

  @@map("academic_faculties")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  academicFacultyId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  faculties         Faculty[]
  courses           Course[] 
  students          Student[]
  departmentHeadId  String?         @unique
  departmentHead    Users?          @relation("DepartmentHead", fields: [departmentHeadId], references: [id])
  staffMembers      Users[]         @relation("DepartmentStaff")

  admitionExame  AdmitionExameRegistration[]
  offeredCourses OfferedCourse[]

  @@map("academic_departments")
}

model Student {
  id                      String      @id @default(uuid())
  studentId               String      @unique
  firstName               String
  middleName              String?
  lastName                String
  profileImage            String?
  email                   String?
  contactNo               String?
  gender                  String
  isWoker                 Boolean     @default(false)
  shift                   Shift       @default(MORNING)
  yearLevel               YearLevel   @default(FIRST)
  isActive                Boolean     @default(false)
  password                String
  gradeDeclarationFile    String
  biFile                  String
  presentAddress          String
  permanentAddress        String?
  academicSemesterId      String
  academicFacultyId       String
  academicDepartmentId    String
  admissionRegistrationId String? @unique

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])

  admissionRegistration AdmitionExameRegistration? @relation(fields: [admissionRegistrationId], references: [id])
  academicDepartment    AcademicDepartment         @relation(fields: [academicDepartmentId], references: [id])
  academicSemester      AcademicSemester           @relation(fields: [academicSemesterId], references: [id])

  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  studentEnrolledCourses             StudentEnrolledCourse[]
  studentEnrolledCourseMarks         StudentEnrolledCourseMark[]
  studentSemesterPayments            StudentSemesterPayment[]
  studentAcademicInfos               StudentAcademicInfo[]

  @@map("students")
}

model Faculty {
  id                          String                       @id @default(uuid())
  facultyId                   String                       @unique
  firstName                   String
  middleName                  String?
  lastName                    String
  profileImage                String?
  email                       String?
  contactNo                   String?
  shift                       Shift                        @default(MORNING)
  gender                      String
  designation                 String
  password                    String
  academicFacultyId           String                       @unique
  academicDepartmentId        String                       @unique
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  courses                     CourseFaculty[]
  academicDepartment          AcademicDepartment           @relation(fields: [academicDepartmentId], references: [id])
  academicFaculty             AcademicFaculty              @relation(fields: [academicFacultyId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]

  @@map("buildings")
}

model Room {
  id                          String                       @id @default(uuid())
  roomNumber                  String
  floor                       String
  buildingId                  String
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  building                    Building                     @relation(fields: [buildingId], references: [id])
  offeredCourseClassSchedules OfferedCourseClassSchedule[]

  @@map("rooms")
}

model Course {
  id                  String                  @id @default(uuid())
  title               String
  code                String
  durationInYears     Int
  courseDisciplines   CourseDiscipline[]
  coursePricing       CoursePricing?
  yearLevel           YearLevel               @default(FIRST)
  shift               Shift                   @default(MORNING)
  academicDepartmentId String
  academicDepartment  AcademicDepartment      @relation(fields: [academicDepartmentId], references: [id])
  credits             Int                     @default(0)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  studentCourses      StudentEnrolledCourse[]
  preRequisite        CourseToPreRequisite[]  @relation("CourseToPreRequisite")
  preRequisiteFor     CourseToPreRequisite[]  @relation("PreRequisiteToCourse")
  faculties           CourseFaculty[]
  offeredCourses      OfferedCourse[]

  @@map("courses")
}

model CourseToPreRequisite {
  courseId       String
  preRequisiteId String
  course         Course @relation("CourseToPreRequisite", fields: [courseId], references: [id])
  preRequisite   Course @relation("PreRequisiteToCourse", fields: [preRequisiteId], references: [id])

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId  String
  facultyId String
  course    Course  @relation(fields: [courseId], references: [id])
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                                 String                              @id @default(uuid())
  startDate                          DateTime
  endDate                            DateTime
  status                             SemesterRegistrationStatus?         @default(UPCOMING)
  createdAt                          DateTime                            @default(now())
  updateAt                           DateTime                            @updatedAt
  academicSemesterId                 String
  academicSemester                   AcademicSemester                    @relation(fields: [academicSemesterId], references: [id])
  offeredCourses                     OfferedCourse[]
  offeredCourseSections              OfferedCourseSection[]
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrations       StudentSemesterRegistration[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("semester_registrations")
}

model AdmitionExameRegistration {
  id            String             @id @default(uuid())
  applicantName String             @unique
  paymentRecipt String
  document      String
  paymentAmoute Int?
  aprovePayment Boolean?           @default(false)
  exameResults  Int?
  passed        Boolean?           @default(false)
  fase          Int                @default(1)
  exameDate     DateTime
  createdAt     DateTime           @default(now())
  updateAt      DateTime           @updatedAt
  departmentId  String
  department    AcademicDepartment @relation(fields: [departmentId], references: [id])
  Student       Student?

  @@map("admition_exame_registration")
}

model OfferedCourse {
  id                                 String                              @id @default(uuid())
  academicDepartmentId               String
  academicDepartment                 AcademicDepartment                  @relation(fields: [academicDepartmentId], references: [id])
  courseId                           String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  course                             Course                              @relation(fields: [courseId], references: [id])
  semesterRegistrationId             String
  offeredCourseSections              OfferedCourseSection[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]
  suspendGrade                       Int                                 @default(0)

  @@map("offered_courses")
}

model OfferedCourseSection {
  id                                 String                              @id @default(uuid())
  title                              String
  maxCapacity                        Int                                 @default(0)
  currentlyEnrolledStudent           Int                                 @default(0)
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  semesterRegistrationId             String
  semesterRegistration               SemesterRegistration                @relation(fields: [semesterRegistrationId], references: [id])
  offeredCourseId                    String
  offeredCourse                      OfferedCourse                       @relation(fields: [offeredCourseId], references: [id])
  offeredCourseClassSchedules        OfferedCourseClassSchedule[]
  studentSemesterRegistrationCourses StudentSemesterRegistrationCourse[]

  @@map("offered_course_sections")
}

model OfferedCourseClassSchedule {
  id                     String               @id @default(uuid())
  startTime              String
  endTime                String
  dayOfWeek              WeekDays             @default(SATURDAY)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  roomId                 String
  room                   Room                 @relation(fields: [roomId], references: [id])
  facultyId              String
  faculty                Faculty              @relation(fields: [facultyId], references: [id])

  @@map("offered_course_class_schedules")
}

model StudentSemesterRegistration {
  id                     String               @id @default(uuid())
  isConfirmed            Boolean?             @default(false)
  totalCreditsTaken      Int?                 @default(0)
  paymentRecipt          String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("student_semester_registrations")
}

model StudentSemesterRegistrationCourse {
  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])
  studentId              String
  student                Student              @relation(fields: [studentId], references: [id])
  offeredCourseId        String
  offeredCourse          OfferedCourse        @relation(fields: [offeredCourseId], references: [id])
  offeredCourseSectionId String
  offeredCourseSection   OfferedCourseSection @relation(fields: [offeredCourseSectionId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@id([semesterRegistrationId, studentId, offeredCourseId])
  @@map("student_semester_registration_courses")
}

model StudentEnrolledCourse {
  id                         String                       @id @default(uuid())
  grade                      String?
  point                      Float?                       @default(0)
  totalMarks                 Int?                         @default(0)
  status                     StudentEnrolledCourseStatus? @default(ONGOING)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  studentId                  String
  student                    Student                      @relation(fields: [studentId], references: [id])
  academicSemesterId         String
  courseId                   String
  course                     Course                       @relation(fields: [courseId], references: [id])
  studentEnrolledCourseMarks StudentEnrolledCourseMark[]
  academicSemester           AcademicSemester             @relation(name: "EnrolledCourseSemester", fields: [academicSemesterId], references: [id])

  @@map("student_enrolled_courses")
}

model StudentEnrolledCourseMark {
  id                      String                @id @default(uuid())
  examType                ExamType?             @default(MIDTERM)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  studentId               String
  student                 Student               @relation(fields: [studentId], references: [id])
  studentEnrolledCourseId String
  studentEnrolledCourse   StudentEnrolledCourse @relation(fields: [studentEnrolledCourseId], references: [id])
  academicSemesterId      String
  academicSemester        AcademicSemester      @relation(name: "MarkSemester", fields: [academicSemesterId], references: [id])

  continuousAssessments Json

  frequencyExam Float? // Nota da prova de frequência (nota máxima de 10)
  finalExam     Float? // Nota do exame final (nota máxima de 10)
  resourceExam  Float? // Nota do exame de recurso (nota máxima de 10)
  specialExam   Float? // Nota do exame especial (nota máxima de 10)
  recoveryExam  Float? // Nota do exame de recuperação (nota máxima de 10)

  totalMarks Float @default(0) // This can be calculated via code if needed
  grade      Float @default(0)

  @@map("student_enrolled_course_marks")
}

model CourseDiscipline {
  id           String @id @default(cuid())
  courseId     String
  disciplineId String
  semesterId   String

  course     Course           @relation(fields: [courseId], references: [id])
  discipline Discipline       @relation(fields: [disciplineId], references: [id])
  semester   AcademicSemester @relation(fields: [semesterId], references: [id])

  credits Int

  @@unique([courseId, disciplineId, semesterId])
  @@map("course_disciplines")
}

model CoursePricing {
  id        String   @id @default(uuid())
  price     Float
  courseId  String   @unique
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_pricings")
}

model Discipline {
  id                    String   @id @default(cuid())
  name                  String
  code                  String   @unique
  description           String?
  credits               Int
  minimumGradeToDismiss Float    @default(10)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  courseDisciplines CourseDiscipline[]

  @@map("disciplines")
}

model StudentSemesterPayment {
  id                 String           @id @default(uuid())
  paymentRecipt      String?
  totalPayment       Int              @default(0)
  baseAmount         Int
  lateFee            Int              @default(0)
  aprovedPayment     Boolean          @default(false)
  paymentType        PAYMENTTYPE      @default(EXPRESS)
  paymentStatus      PaymentStatus?   @default(PENDING)
  paymentMonth       Int
  paymentYear        Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  studentId          String
  student            Student          @relation(fields: [studentId], references: [id])
  academicSemesterId String
  academicSemester   AcademicSemester @relation(fields: [academicSemesterId], references: [id])

  @@map("sudent_semester_payments")
}

model StudentAcademicInfo {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  studentId             String
  student               Student  @relation(fields: [studentId], references: [id])
  totalCompletedCredits Int?     @default(0)
  cgpa                  Float?   @default(0)

  @@map("student_academic_infos")
}

model Events {
  id          String   @id @default(uuid())
  title       String
  description String
  thumbnail   String
  color       String
  location    DateTime
  mandatory   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum SemesterRegistrationStatus {
  UPCOMING
  ONGOING
  ENDED
}

enum Shift {
  MORNING
  AFTERNOON
  EVENING
}

enum Status {
  APROVE
  PENDING
  DENIDE
}

enum WeekDays {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum StudentEnrolledCourseStatus {
  ONGOING
  COMPLETED
  WITHDRAWN
}

enum ExamType {
  MIDTERM
  FINAL
}

enum PaymentStatus {
  PENDING
  NOT_PAID
  FULL_PAID
}
enum YearLevel {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
}

enum UserRole {
  super_admin
  admin
  student
  editor
  faculty
  accountant
  department_head
  staff
}

enum PAYMENTTYPE {
  RECIPT
  EXPRESS
}
